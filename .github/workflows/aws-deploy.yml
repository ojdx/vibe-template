name: Deploy to AWS

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'public-www/**'
      - 'infrastructure/**'
      - 'scripts/generate-deployment-info.js'
      - '.github/workflows/aws-deploy.yml'
  pull_request:
    branches: [ main, dev ]
    paths:
      - 'public-www/**'
      - 'infrastructure/**'
      - 'scripts/generate-deployment-info.js'
      - '.github/workflows/aws-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ (github.ref == 'refs/heads/main' || github.base_ref == 'main') && 'production' || 'development' }}
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '{{NODE_VERSION}}'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Set branch name for deployment
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
        else
          echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
        fi
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHubActionsCDKDeploy
        aws-region: {{AWS_REGION}}
    
    - name: Install AWS CDK
      run: npm install -g aws-cdk
    
    - name: CDK Bootstrap (if needed)
      run: |
        if ! aws cloudformation describe-stacks --stack-name CDKToolkit --region {{AWS_REGION}} 2>/dev/null; then
          echo "Bootstrapping CDK..."
          npm run cdk:bootstrap
        else
          echo "CDK already bootstrapped"
        fi
    
    - name: Inject deployment information
      run: |
        node scripts/generate-deployment-info.js {{PUBLIC_DIR}}/{{INDEX_DOCUMENT}}
      env:
        BRANCH_NAME: ${{ env.BRANCH_NAME }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_RUN_NUMBER: ${{ github.run_number }}
        GITHUB_ACTOR: ${{ github.actor }}
    
    - name: CDK Synth
      run: npm run cdk:synth
    
    - name: CDK Deploy
      run: npm run cdk:deploy -- --require-approval never
    
    - name: Determine stack name and URL
      id: deployment-info
      run: |
        # Get configuration values
        PROJECT_NAME=$(node scripts/get-config.js project.name)
        DOMAIN_ROOT=$(node scripts/get-config.js domain.root)
        STACK_PREFIX=$(node scripts/get-config.js cdk.stackNamePrefix)
        STACK_PROD=$(node scripts/get-config.js cdk.stackNameProduction)
        
        if [ "$BRANCH_NAME" = "main" ] || [ "$BRANCH_NAME" = "master" ]; then
          STACK_NAME="$STACK_PROD"
          WEBSITE_URL="https://$DOMAIN_ROOT"
        else
          # Create subdomain using the same logic as the CDK app
          SUBDOMAIN=$(echo "$BRANCH_NAME" | sed 's/^feature[\/\-]//i; s/^feat[\/\-]//i; s/^fix[\/\-]//i; s/^hotfix[\/\-]//i; s/^release[\/\-]//i' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g; s/-\+/-/g; s/^-\|-$//g' | cut -c1-20)
          STACK_NAME="$STACK_PREFIX-$SUBDOMAIN"
          WEBSITE_URL="https://$SUBDOMAIN.$DOMAIN_ROOT"
        fi
        echo "stack-name=$STACK_NAME" >> $GITHUB_OUTPUT
        echo "website-url=$WEBSITE_URL" >> $GITHUB_OUTPUT
    
    - name: Get CloudFront Distribution ID
      id: cloudfront
      run: |
        DIST_ID=$(aws cloudformation describe-stacks \
          --stack-name ${{ steps.deployment-info.outputs.stack-name }} \
          --query 'Stacks[0].Outputs[?OutputKey==`DistributionId`].OutputValue' \
          --output text)
        echo "distribution-id=$DIST_ID" >> $GITHUB_OUTPUT
    
    - name: Invalidate CloudFront Cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ steps.cloudfront.outputs.distribution-id }} \
          --paths "/*"
    
    - name: Comment PR with deployment URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const websiteUrl = '${{ steps.deployment-info.outputs.website-url }}';
          const branchName = process.env.BRANCH_NAME;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Feature branch deployed!**\n\n📍 **Preview URL:** ${websiteUrl}\n\n*Branch: \`${branchName}\`*\n\n*This deployment will be automatically cleaned up when the PR is closed.*`
          });
    
    - name: Deployment Summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "✅ Successfully deployed to AWS" >> $GITHUB_STEP_SUMMARY
        echo "🌐 Website URL: ${{ steps.deployment-info.outputs.website-url }}" >> $GITHUB_STEP_SUMMARY
        echo "📦 S3 Bucket: $(aws cloudformation describe-stacks --stack-name ${{ steps.deployment-info.outputs.stack-name }} --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' --output text)" >> $GITHUB_STEP_SUMMARY
        echo "🚀 CloudFront Distribution: ${{ steps.cloudfront.outputs.distribution-id }}" >> $GITHUB_STEP_SUMMARY