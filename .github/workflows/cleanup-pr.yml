name: Cleanup Feature Branch Deployment

on:
  pull_request:
    types: [closed]
    branches: [{{PRODUCTION_BRANCH}}]

permissions:
  id-token: write
  contents: read

jobs:
  cleanup:
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '{{NODE_VERSION}}'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: {{AWS_REGION}}
        role-session-name: GitHubActions-CDKCleanup
    
    - name: Set branch name for cleanup
      run: echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
    
    - name: Determine stack name
      id: stack-info
      run: |
        # Get configuration values
        STACK_PREFIX=$(node scripts/get-config.js cdk.stackNamePrefix)
        DOMAIN_ROOT=$(node scripts/get-config.js domain.root)
        
        SUBDOMAIN=$(echo "$BRANCH_NAME" | sed 's/^feature[\/\-]//i; s/^feat[\/\-]//i; s/^fix[\/\-]//i; s/^hotfix[\/\-]//i; s/^release[\/\-]//i' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g; s/-\+/-/g; s/^-\|-$//g' | cut -c1-20)
        STACK_NAME="$STACK_PREFIX-$SUBDOMAIN"
        echo "stack-name=$STACK_NAME" >> $GITHUB_OUTPUT
        echo "subdomain=$SUBDOMAIN" >> $GITHUB_OUTPUT
        echo "domain-root=$DOMAIN_ROOT" >> $GITHUB_OUTPUT
    
    - name: Check if stack exists
      id: stack-check
      run: |
        if aws cloudformation describe-stacks --stack-name ${{ steps.stack-info.outputs.stack-name }} 2>/dev/null; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Destroy CDK stack
      if: steps.stack-check.outputs.exists == 'true'
      run: |
        npm run cdk:destroy -- --force
    
    - name: Comment PR with cleanup status
      uses: actions/github-script@v7
      with:
        script: |
          const stackExists = '${{ steps.stack-check.outputs.exists }}';
          const subdomain = '${{ steps.stack-info.outputs.subdomain }}';
          const domainRoot = '${{ steps.stack-info.outputs.domain-root }}';
          const branchName = process.env.BRANCH_NAME;
          
          let message;
          if (stackExists === 'true') {
            message = `üßπ **Feature branch deployment cleaned up!**\n\n‚ùå **Removed:** https://${subdomain}.${domainRoot}\n\n*Branch: \`${branchName}\`*\n\n*All AWS resources have been destroyed.*`;
          } else {
            message = `‚ÑπÔ∏è **No deployment found to clean up**\n\n*Branch: \`${branchName}\`*\n\n*No AWS resources were found for this branch.*`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });